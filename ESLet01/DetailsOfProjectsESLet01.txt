1) In Other Lanaguges
     Block Scope is defined as below Scope of the Variable is between this two curly braces
    {
        //This is a Block Scope
        int a = 10;
    }
    Console.WriteLine(""+a); // It Will give us error in other Lanuages but in Javascript it super chill it works DAMM!!!
2) In Javascript, We only have two scope "GLOBAL"  & "FUNCTION".
   a)   "GLOBAL Scope" 
        {
            var a = "Block Data"; //Exists in the GLOBAL Scope Therefore we were able to call it from outside the Block Scope
        }
        No Error
        But in other Lanuages It will cause an Error
        Since Variable is called outside of the scope.
        console.log(a); //Prints "Block Data"
    b) "FUNCTION Scope"
        function hello(){
            var a = 10;
            console.log("Inside the Function Scope:> "+a); //No Error
        }
        hello();
        Error occured stating "a is not defined".
        console.log(a); //a is not defined
    c) "HOISTING"
        In function level scope, 
        If we declare another block level scope with same variable name then 
        the variable inside the block level will be considered in Javascript. 
        function functionLevelScope(){
            var a = "function level variable"; 
            
            for (var index = 0; index < 10; index++) {
                var a = "block level"; // This will override the above "a".
            } 
            //In Other Lanuages, this will print "function level variable"
            //but in Javascript it will print "block level variable"
            console.log(a); 
        }
        functionLevelScope();
    d) IIFE - Immediality Invoked function expression
        The Work-Around for the above problem(HOISTING) is IIFE.
        As we know the Function Level Variable are not accessible outside its scope 
        We can declare a same named variable inside a IIFE & outside with out any issue.
       function functionLevelScope_IIFE(){
            var a = "function level variable"; //Line A
            for (let index = 0; index <5; index++) {
            //Waring : IIFE Below
            (function(){
                var a = "IIFE Level Variable"; // Line B
            })();
            }
            //Below will print "Functtion level variable"
            //Since function has there own scope 
            //Line A & Line B are in different scope now
            console.log(a);
        }
        functionLevelScope_IIFE();
3) In ES 6, We have LET keyword :> To solve the above HOISTING problem.
    when we declare variable with let keyword it scope becomes block level.    
    function functionWithLet(){
        var a = "function level scope";
        for (let i = 0; i < 10; i++) {
            let a = "Let Scope ";
        }
        //Prints "function level scope"
        //Since Line B variable is declared with "let" keyword
        console.log(a);
    }
    functionWithLet();
4) Interview Question - > What will Line B will print & How to optimize the below code
    var funcs = [];

    for(var i = 0; i <= 5; i++){
        var y = i;
        funcs.push(function(){
            console.log("Variable declared using var keyword :> "+y);
        });
    }

    funcs.forEach(function(func){
        func(); // Line B
    });
    // Line B will print 5 times "5"
    // As variable y has global level scope(HOISTING).

    //To Solve the above problem we must use let keyword on "y" variable
    console.log("/*************************************{y}************************************************ */");

    funcs = [];

    for(var i = 0; i <= 5; i++){
        let y = i;
        funcs.push(function(){
            console.log("Variable declared using let keyword :> "+y);
        });
    }

    funcs.forEach(function(func){
        func(); // Line B
    });
    // Line B will now print numbers from 0 to 5 
    // Since we have declared variable with let keywords
5) Conculsions 
    a) let has block level scope
    b) use let very often as it resolves the scope of variable issue and hositing issue.
    

    